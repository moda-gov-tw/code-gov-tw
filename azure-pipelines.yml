trigger:
  branches:
    include:
      - main
      - release

pr:
  branches:
    include:
      - main
      - release

pool:
  vmImage: "ubuntu-latest"

variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm
  cache_key: 'npm | "$(Agent.OS)" | package.json'
  artifact_name: "ci-build"
  artifact_path: "./dist"

stages:
  - stage: checkBeforeBuild
    displayName: Basic Checks
    jobs:
      - job: Linter
        displayName: Lint Project
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run lint
      - job: Formatting
        displayName: Formatting Check
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run fmt.check
  - stage: build
    condition: succeeded()
    dependsOn: checkBeforeBuild
    displayName: Build
    jobs:
      - job: Build
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: CmdLine@2
            inputs:
              script: |
                npm install
                npm run build
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: $(artifact_path)
              artifact: $(artifact_name)
              publishLocation: "pipeline"
  - stage: checkAfterBuild
    displayName: Performance and Accessibility Check
    condition: succeeded()
    dependsOn: build
    jobs:
      - job: accessibility
        displayName: Accessibility Check
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: $(artifact_name)
              targetPath: $(artifact_path)
          - task: CmdLine@2
            displayName: Accessibility Check
            inputs:
              script: |
                npm install
                npm run a11y.check
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./accessibility-check-results"
              artifact: "accessibility-check-results"
              publishLocation: "pipeline"
      - job: lighthouseci
        displayName: Lighthouse Check
        steps:
          - task: UseNode@1
            inputs:
              version: "18.x"
          - task: Cache@2
            inputs:
              key: $(cache_key)
              path: $(npm_config_cache)
            displayName: Use Cache
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: $(artifact_name)
              targetPath: $(artifact_path)
          - task: CmdLine@2
            displayName: Lighthouse CI
            inputs:
              script: |
                npm install -g @lhci/cli@0.13.x
                lhci autorun
          - task: PublishPipelineArtifact@1
            condition: succeededOrFailed()
            inputs:
              targetPath: "./.lighthouseci"
              artifact: "lighthouse-results"
              publishLocation: "pipeline"
  - stage: releaseToIPFS
    displayName: Release to IPFS
    dependsOn: checkAfterBuild
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'), eq(variables['Build.Reason'], 'IndividualCI'))
    jobs:
      - job: upload_to_ipfs
        displayName: Update DNS
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: $(artifact_name)
              targetPath: $(artifact_path)
          - task: GoTool@0
            displayName: "Use Go 1.22.1"
            inputs:
              version: 1.22.1
          - task: CmdLine@2
            displayName: "Build and Upload to IPFS"
            inputs:
              script: |
                #!/bin/bash
                git clone https://github.com/PinataCloud/pinata-go-cli
                ls -al
                cd pinata-go-cli
                go build
                mv pinata ../
                cd ..
                ./pinata auth $(PINATA_JWT)
          - task: CmdLine@2
            displayName: "Upload to IPFS"
            inputs:
              script: |
                #!/bin/bash
                name=`git log -n 1 --format=format:%h`
                cid=`./pinata upload --name $name --cid-only ./dist | tail -n 1`
                cidlist=`./pinata list | grep "ipfs_pin_hash" | cut -d '"' -f 4`
                count=`echo $cidlist | wc -l`
                if [ "$count" -gt 2 ]; then 
                  lastcid=`echo $cidlist | tail -n 1`
                  ./pinata unpin $lastcid;
                  echo "$lastcid"
                  echo "unpin status: $?"
                fi
                echo "##vso[task.setvariable variable=cid]$cid"
          - task: CmdLine@2
            displayName: "Update DNS"
            inputs:
              script: |
                #!/bin/bash
                echo "get cid: $(cid)"
                if [[ -z "$(cid)" ]]; then
                    echo "CID is empty"
                    exit 1
                fi
                curl -X PATCH \
                  --url "https://api.cloudflare.com/client/v4/zones/$(ZONE_ID)/dns_records/$(DNS_RECORD_ID)" \
                  -H "Content-Type: application/json" \
                  -H "Authorization: Bearer $(CLOUDFLARE_API_TOKEN)" \
                  --data '{"content": "'dnslink=/ipfs/$(cid)'"}' -f -s
